{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/servers.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./components/initial-modal/initial-modal.component\";\nimport * as i4 from \"./components/navigation-sidebar/navigation-sidebar.component\";\nimport * as i5 from \"./components/server-sidebar/server-sidebar.component\";\nimport * as i6 from \"./components/chat/chat.component\";\nexport class ServersComponent {\n  constructor(serversService, router, route) {\n    this.serversService = serversService;\n    this.router = router;\n    this.route = route;\n    this.servers = [];\n    this.showCreateServerModal = false;\n  }\n  ngOnInit() {\n    this.serversService.getServers().subscribe(data => {\n      this.servers = data;\n      let firstServer = this.servers.at(0);\n      // If the user is not a member of any server, show a form to create one.\n      if (!firstServer) {\n        this.showCreateServerModal = true;\n        return;\n      }\n      let firstChannel = firstServer.channels.at(0);\n      if (firstChannel) this.router.navigate([\"servers\", firstServer.id, 'channels', firstChannel.id]);else this.router.navigate([\"servers\", firstServer.id]);\n    });\n    this.route.params.subscribe(params => console.log(params));\n    this.route.paramMap.subscribe(params => {\n      console.log(\"route changed\");\n      let serverId = params.get('serverId');\n      if (!serverId) return;\n      this.currentServer = this.servers.find(s => s.id === parseInt(serverId));\n      if (!this.currentServer) return; //TODO: handle servers that don't exist.\n      let channelId = params.get('channelId');\n      if (!channelId) {\n        let firstChannel = this.currentServer.channels.at(0);\n        if (firstChannel) {\n          this.router.navigate([\"servers\", this.currentServer.id, 'channels', firstChannel.id]);\n          return;\n        }\n        this.router.navigate([\"servers\", this.currentServer.id, 'channels']);\n        return;\n      }\n      let channel = this.currentServer.channels.find(c => c.id == channelId);\n      if (channel) {\n        this.router.navigate([\"servers\", serverId, 'channels', channelId]);\n        return;\n      } // TODO: handle channels thad don't exist.\n    });\n  }\n}\n\nServersComponent.ɵfac = function ServersComponent_Factory(t) {\n  return new (t || ServersComponent)(i0.ɵɵdirectiveInject(i1.ServersService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nServersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ServersComponent,\n  selectors: [[\"app-servers\"]],\n  decls: 6,\n  vars: 4,\n  consts: [[1, \"w-full\", \"h-screen\", \"overflow-hidden\", \"flex\", \"m-0\", \"p-0\"], [3, \"servers\", \"currentServerId\"], [3, \"server\"], [1, \"w-full\", 3, \"open\"]],\n  template: function ServersComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"app-navigation-sidebar\", 1);\n      i0.ɵɵelementStart(2, \"div\");\n      i0.ɵɵelement(3, \"app-server-sidebar\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"app-chat\")(5, \"app-initial-modal\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"servers\", ctx.servers)(\"currentServerId\", ctx.currentServer == null ? null : ctx.currentServer.id);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"server\", ctx.currentServer);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"open\", ctx.showCreateServerModal);\n    }\n  },\n  dependencies: [i3.InitialModalComponent, i4.NavigationSidebarComponent, i5.ServerSidebarComponent, i6.ChatComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["ServersComponent","constructor","serversService","router","route","ngOnInit","getServers","subscribe","data","servers","firstServer","at","showCreateServerModal","firstChannel","channels","navigate","id","params","console","log","paramMap","serverId","get","currentServer","find","s","parseInt","channelId","channel","c","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\anndr\\source\\repos\\DiscordAngualar2\\ClientApp\\src\\app\\pages\\servers\\servers.component.ts","C:\\Users\\anndr\\source\\repos\\DiscordAngualar2\\ClientApp\\src\\app\\pages\\servers\\servers.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ServersService } from '../../services/servers.service';\nimport { Server} from '../../models/server';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-servers',\n  templateUrl: './servers.component.html',\n  styleUrls: ['./servers.component.css']\n})\nexport class ServersComponent implements OnInit {\n  servers: Server[] = [];\n  currentServer?: Server;\n  showCreateServerModal = false;\n\n  constructor(\n    private serversService: ServersService, \n    private router: Router,\n    public route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.serversService.getServers().subscribe((data) => {\n      this.servers = data;\n\n      let firstServer = this.servers.at(0);\n      // If the user is not a member of any server, show a form to create one.\n      if (!firstServer) {\n        this.showCreateServerModal = true;\n        return\n      }\n\n      let firstChannel = firstServer.channels.at(0);\n      if (firstChannel) \n        this.router.navigate([\"servers\", firstServer.id, 'channels', firstChannel.id]);\n      else\n        this.router.navigate([\"servers\", firstServer.id]);\n    })\n\n    this.route.params.subscribe(params => console.log(params))\n\n    this.route.paramMap.subscribe(params => {\n      console.log(\"route changed\")\n      let serverId = params.get('serverId');\n      if (!serverId) return;\n\n      this.currentServer = this.servers.find(s => s.id === parseInt(serverId!));\n      if (!this.currentServer) return; //TODO: handle servers that don't exist.\n\n      let channelId = params.get('channelId');\n      if (!channelId) {\n        let firstChannel = this.currentServer.channels.at(0);\n        if (firstChannel) {\n          this.router.navigate([\"servers\", this.currentServer.id, 'channels', firstChannel.id]);\n          return;\n        }\n        this.router.navigate([\"servers\", this.currentServer.id, 'channels']);\n        return;\n      }\n\n      let channel = this.currentServer.channels.find(c => c.id == channelId);\n      if (channel) {\n        this.router.navigate([\"servers\", serverId, 'channels', channelId]);\n        return;\n      } // TODO: handle channels thad don't exist.\n\n    });\n  }\n}\n","<div class=\"w-full h-screen overflow-hidden flex m-0 p-0\">\n    <app-navigation-sidebar [servers]=\"servers\" [currentServerId]=\"currentServer?.id\"/>\n    <div>\n        <app-server-sidebar [server]=\"currentServer\"/>\n    </div>\n    <app-chat />\n    <app-initial-modal class=\"w-full\" [open]=\"showCreateServerModal\"/>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}