{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/storage-service.service\";\nexport class AuthenticationInterceptor {\n  constructor(storageService) {\n    this.storageService = storageService;\n  }\n  intercept(req, next) {\n    if (this.storageService.isLoggedIn()) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${this.storageService.getToken()}`\n        }\n      });\n    }\n    return next.handle(req);\n  }\n}\nAuthenticationInterceptor.ɵfac = function AuthenticationInterceptor_Factory(t) {\n  return new (t || AuthenticationInterceptor)(i0.ɵɵinject(i1.StorageService));\n};\nAuthenticationInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationInterceptor,\n  factory: AuthenticationInterceptor.ɵfac\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,yBAAyB;EAElCC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAoB;EAEtDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,IAAI,IAAI,CAACH,cAAc,CAACI,UAAU,EAAE,EAAE;MAClCF,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC;QACZC,UAAU,EAAE;UACRC,aAAa,EAAE,UAAU,IAAI,CAACP,cAAc,CAACQ,QAAQ,EAAE;;OAE9D,CAAC;;IAEN,OAAOL,IAAI,CAACM,MAAM,CAACP,GAAG,CAAC;EAC3B;;AAbSJ,yBAAyB;mBAAzBA,yBAAyB;AAAA;AAAzBA,yBAAyB;SAAzBA,yBAAyB;EAAAY,SAAzBZ,yBAAyB;AAAA","names":["AuthenticationInterceptor","constructor","storageService","intercept","req","next","isLoggedIn","clone","setHeaders","Authorization","getToken","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\anndr\\source\\repos\\DiscordAngualar2\\ClientApp\\src\\app\\interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { StorageService } from \"./services/storage-service.service\";\r\n\r\n@Injectable()\r\nexport class AuthenticationInterceptor implements HttpInterceptor {\r\n    \r\n    constructor(private storageService: StorageService) { }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (this.storageService.isLoggedIn()) {\r\n            req = req.clone({\r\n                setHeaders: {\r\n                    Authorization: `Bearer ${this.storageService.getToken()}`\r\n                }\r\n            });\r\n        }\r\n        return next.handle(req);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}